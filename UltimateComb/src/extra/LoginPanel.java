/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package extra;

import static Server.ServerLogs.LogInKorrisponses.*;
import static Server.ServerLogs.readFromSocket;
import static Server.ServerLogs.writeIntoSocket;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mike
 */
public class LoginPanel extends javax.swing.JFrame {

    final String unknownServerResponse = "Unkown Server Response";

    /**
     * Creates new form NewLoginPanel
     */
    public LoginPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSignUpButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLoginButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jNameField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(100, 120));
        getContentPane().setLayout(new java.awt.GridLayout(3, 0));

        jSignUpButton.setText("Sign Up");
        jSignUpButton.setMaximumSize(null);
        jSignUpButton.setMinimumSize(null);
        jSignUpButton.setPreferredSize(new java.awt.Dimension(90, 35));
        jPanel1.add(jSignUpButton);

        getContentPane().add(jPanel1);

        jLoginButton.setText("Log In");
        jLoginButton.setToolTipText("");
        jLoginButton.setMaximumSize(null);
        jLoginButton.setMinimumSize(null);
        jLoginButton.setPreferredSize(new java.awt.Dimension(90, 35));
        jPanel2.add(jLoginButton);

        getContentPane().add(jPanel2);

        jLabel1.setText("Name");
        jLabel1.setMaximumSize(null);
        jLabel1.setMinimumSize(null);
        jPanel3.add(jLabel1);

        getContentPane().add(jPanel3);

        jNameField.setMaximumSize(null);
        jNameField.setMinimumSize(null);
        jNameField.setPreferredSize(new java.awt.Dimension(80, 30));
        jPanel4.add(jNameField);

        getContentPane().add(jPanel4);

        jLabel2.setText("Password");
        jLabel2.setMaximumSize(null);
        jLabel2.setMinimumSize(null);
        jPanel5.add(jLabel2);

        getContentPane().add(jPanel5);

        jPasswordField.setMaximumSize(null);
        jPasswordField.setMinimumSize(null);
        jPasswordField.setPreferredSize(new java.awt.Dimension(80, 30));
        jPanel6.add(jPasswordField);

        getContentPane().add(jPanel6);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LoginPanel().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jLoginButton;
    private javax.swing.JTextField jNameField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JButton jSignUpButton;
    // End of variables declaration//GEN-END:variables

    public LoginPanel(Socket client, LoginListener listener) {
        initComponents();
        setup(client, listener);
    }

    private void setup(Socket client, LoginListener listener) {

        jLoginButton.addActionListener((ActionEvent e) -> {
            try {
                login(client, jNameField.getText(), String.valueOf(jPasswordField.getPassword()), listener);
            } catch (IOException ex) {
                Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        jPasswordField.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {
                        login(client, jNameField.getText(), String.valueOf(jPasswordField.getPassword()), listener);
                    } catch (IOException ex) {
                        Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {

            }
        });

        jSignUpButton.addActionListener((ActionEvent e) -> {
            try {
                signup(client, jNameField.getText(), String.valueOf(jPasswordField.getPassword()));
            } catch (IOException ex) {
                Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        
        jNameField.requestFocus();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void signup(Socket client, String name, String pass) throws IOException {

        writeIntoSocket(client, RegistrationRequest);
        switch (readFromSocket(client).get(0)) {
            case RegistrationDenied:
                JOptionPane.showMessageDialog(getContentPane(), RegistrationDenied, "server response", JOptionPane.ERROR_MESSAGE);
                return;
            case RegistrationProceedName:
                break;
            default:
                JOptionPane.showMessageDialog(getContentPane(), unknownServerResponse, "server response", JOptionPane.ERROR_MESSAGE);
                return;
        }
        writeIntoSocket(client, name);
        switch (readFromSocket(client).get(0)) {
            case RegistrationDenied:
                JOptionPane.showMessageDialog(getContentPane(), RegistrationDenied, "server response", JOptionPane.ERROR_MESSAGE);
                return;
            case RegistrationProceedPassword:
                break;
            default:
                JOptionPane.showMessageDialog(getContentPane(), unknownServerResponse, "server response", JOptionPane.ERROR_MESSAGE);
                return;
        }
        writeIntoSocket(client, pass);
        switch (readFromSocket(client).get(0)) {
            case RegistrationDenied:
                JOptionPane.showMessageDialog(getContentPane(), RegistrationDenied, "server response", JOptionPane.ERROR_MESSAGE);
            case RegistrationAccepted:
                JOptionPane.showMessageDialog(getContentPane(), RegistrationAccepted, "server response", JOptionPane.INFORMATION_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(getContentPane(), unknownServerResponse, "server response", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void login(Socket client, String name, String pass, LoginListener listener) throws IOException {
        writeIntoSocket(client, LogInRequest);
        switch (readFromSocket(client).get(0)) {
            case LogInDenied:
                JOptionPane.showMessageDialog(getContentPane(), LogInDenied, "server response", JOptionPane.ERROR_MESSAGE);
                return;
            case LogInProceedName:
                break;
            default:
                JOptionPane.showMessageDialog(getContentPane(), unknownServerResponse, "server response", JOptionPane.ERROR_MESSAGE);
                return;
        }
        writeIntoSocket(client, name);
        switch (readFromSocket(client).get(0)) {
            case LogInDenied:
                JOptionPane.showMessageDialog(getContentPane(), LogInDenied, "server response", JOptionPane.ERROR_MESSAGE);
                return;
            case LogInProceedPassword:
                break;
            default:
                JOptionPane.showMessageDialog(getContentPane(), unknownServerResponse, "server response", JOptionPane.ERROR_MESSAGE);
                return;
        }
        writeIntoSocket(client, pass);
        switch (readFromSocket(client).get(0)) {
            case LogInDenied:
                JOptionPane.showMessageDialog(getContentPane(), LogInDenied, "server response", JOptionPane.ERROR_MESSAGE);
                return;
            case LogInSuccess:
                listener.logged(name);
                break;
            default:
                JOptionPane.showMessageDialog(getContentPane(), unknownServerResponse, "server response", JOptionPane.ERROR_MESSAGE);
        }
    }
}

