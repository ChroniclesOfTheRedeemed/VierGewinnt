/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TheBetterClient;

import Core.Game2D2P;
import Core.Player;
import Core.VierGewinntSpiel;
import Exceptions.MoveNotAvailableException;
import Games.Chomp.ChompGame;
import Interface.Swing.VierGewinntDialog;
import Interface.Swing.VierGewinntPane;
import Interface.VierGewinntManager;
import PlayerInterface.ChompManager;
import PlayerInterface.Swing.ChompDialog;
import PlayerInterface.Swing.ChompSwingPane;
import static Server.ServerLogs.GameVars.*;
import static Server.ServerLogs.LoggedClientResponses.LogOutRequest;
import static Server.ServerLogs.LoggedClientResponses.RequestLoggedClients;
import static Server.ServerLogs.LoggedClientResponses.SendMessageRequest;
import static Server.ServerLogs.writeIntoSocket;
import extra.ClientPanelListener;
import extra.LoggedClientRequestListener;
import extra.ChompSimulatedGame;
import extra.VerGewinntSimulation;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import extra.TempGame;

/**
 *
 * @author Mike
 */
public class ClientFrame extends javax.swing.JFrame {

    /**
     * Creates new form ClientFrame
     */
    public ClientFrame() {
        initComponents();
        ThisClientsName = "your Moma";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCenter = new javax.swing.JPanel();
        jPanelCenterCenter = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jChatArea = new javax.swing.JTextArea();
        jPanelCenterTop = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelCenterBottom = new javax.swing.JPanel();
        jPanelCenterBottomCenter = new javax.swing.JPanel();
        jPanelCenterBottomCenterCenter = new javax.swing.JPanel();
        jTextFieldSend = new javax.swing.JTextField();
        jPanelCenterBottomCenterTop = new javax.swing.JPanel();
        jPanelCenterBottomCenterBottom = new javax.swing.JPanel();
        jPanelCenterBottomRight = new javax.swing.JPanel();
        jButtonSend = new javax.swing.JButton();
        jPanelRight = new javax.swing.JPanel();
        jPanelRightCenter = new javax.swing.JPanel();
        jServerResponse = new javax.swing.JLabel();
        jPanelOnline = new javax.swing.JPanel();
        jButtonLogOut = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanelLeft = new javax.swing.JPanel();
        jPanelLeftTop = new javax.swing.JPanel();
        jPanelLeftTopTop = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButtonPlay = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jComboBoxGames = new javax.swing.JComboBox<>();
        jPanelLeftTopCenter = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListInvSend = new javax.swing.JList<>();
        jPanelLeftBottom = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListInvReceived = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jButtonAcceptInv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ClientName");
        getContentPane().setLayout(new java.awt.BorderLayout(10, 0));

        jPanelCenter.setLayout(new java.awt.BorderLayout());

        jPanelCenterCenter.setLayout(new java.awt.BorderLayout());

        jChatArea.setColumns(20);
        jChatArea.setRows(5);
        jScrollPane1.setViewportView(jChatArea);

        jPanelCenterCenter.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanelCenter.add(jPanelCenterCenter, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Chat");
        jPanelCenterTop.add(jLabel1);

        jPanelCenter.add(jPanelCenterTop, java.awt.BorderLayout.PAGE_START);

        jPanelCenterBottom.setLayout(new java.awt.BorderLayout(5, 0));

        jPanelCenterBottomCenter.setLayout(new java.awt.BorderLayout(5, 5));

        jPanelCenterBottomCenterCenter.setLayout(new java.awt.BorderLayout());
        jPanelCenterBottomCenterCenter.add(jTextFieldSend, java.awt.BorderLayout.CENTER);

        jPanelCenterBottomCenter.add(jPanelCenterBottomCenterCenter, java.awt.BorderLayout.CENTER);

        jPanelCenterBottomCenterTop.setPreferredSize(new java.awt.Dimension(285, 1));
        jPanelCenterBottomCenterTop.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanelCenterBottomCenterTopLayout = new javax.swing.GroupLayout(jPanelCenterBottomCenterTop);
        jPanelCenterBottomCenterTop.setLayout(jPanelCenterBottomCenterTopLayout);
        jPanelCenterBottomCenterTopLayout.setHorizontalGroup(
            jPanelCenterBottomCenterTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 194, Short.MAX_VALUE)
        );
        jPanelCenterBottomCenterTopLayout.setVerticalGroup(
            jPanelCenterBottomCenterTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelCenterBottomCenter.add(jPanelCenterBottomCenterTop, java.awt.BorderLayout.PAGE_START);

        jPanelCenterBottomCenterBottom.setPreferredSize(new java.awt.Dimension(285, 2));

        javax.swing.GroupLayout jPanelCenterBottomCenterBottomLayout = new javax.swing.GroupLayout(jPanelCenterBottomCenterBottom);
        jPanelCenterBottomCenterBottom.setLayout(jPanelCenterBottomCenterBottomLayout);
        jPanelCenterBottomCenterBottomLayout.setHorizontalGroup(
            jPanelCenterBottomCenterBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 194, Short.MAX_VALUE)
        );
        jPanelCenterBottomCenterBottomLayout.setVerticalGroup(
            jPanelCenterBottomCenterBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        jPanelCenterBottomCenter.add(jPanelCenterBottomCenterBottom, java.awt.BorderLayout.PAGE_END);

        jPanelCenterBottom.add(jPanelCenterBottomCenter, java.awt.BorderLayout.CENTER);

        jButtonSend.setText("Send");
        jPanelCenterBottomRight.add(jButtonSend);

        jPanelCenterBottom.add(jPanelCenterBottomRight, java.awt.BorderLayout.LINE_END);

        jPanelCenter.add(jPanelCenterBottom, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

        jPanelRight.setLayout(new java.awt.BorderLayout());

        jServerResponse.setText(" ");
        jPanelRightCenter.add(jServerResponse);

        jPanelRight.add(jPanelRightCenter, java.awt.BorderLayout.CENTER);

        jPanelOnline.setLayout(new java.awt.GridLayout(0, 1));

        jButtonLogOut.setText("LogOut");
        jPanelOnline.add(jButtonLogOut);

        jLabel2.setText("Player List");
        jPanelOnline.add(jLabel2);

        jPanelRight.add(jPanelOnline, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanelRight, java.awt.BorderLayout.LINE_END);

        jPanelLeft.setLayout(new java.awt.GridLayout(2, 1));

        jPanelLeftTop.setLayout(new java.awt.BorderLayout());

        jPanelLeftTopTop.setLayout(new java.awt.GridLayout(2, 2));

        jLabel3.setText("Games");
        jPanel2.add(jLabel3);

        jPanelLeftTopTop.add(jPanel2);
        jPanelLeftTopTop.add(jPanel3);

        jButtonPlay.setText("Play");
        jPanel4.add(jButtonPlay);

        jPanelLeftTopTop.add(jPanel4);

        jPanel8.add(jComboBoxGames);

        jPanelLeftTopTop.add(jPanel8);

        jPanelLeftTop.add(jPanelLeftTopTop, java.awt.BorderLayout.PAGE_START);

        jPanelLeftTopCenter.setLayout(new java.awt.BorderLayout());

        jPanel10.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelLeftTopCenter.add(jPanel10, java.awt.BorderLayout.LINE_START);

        jPanel12.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setViewportView(jListInvSend);

        jPanel12.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanelLeftTopCenter.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanelLeftTop.add(jPanelLeftTopCenter, java.awt.BorderLayout.CENTER);

        jPanelLeft.add(jPanelLeftTop);

        jPanelLeftBottom.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel13.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel13, java.awt.BorderLayout.LINE_START);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setViewportView(jListInvReceived);

        jPanel14.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanelLeftBottom.add(jPanel1, java.awt.BorderLayout.CENTER);

        jLabel4.setText("Invitation");
        jPanel5.add(jLabel4);

        jPanelLeftBottom.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jButtonAcceptInv.setText("accept Invitation");
        jButtonAcceptInv.setPreferredSize(new java.awt.Dimension(130, 30));
        jPanel6.add(jButtonAcceptInv);

        jPanelLeftBottom.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jPanelLeft.add(jPanelLeftBottom);

        getContentPane().add(jPanelLeft, java.awt.BorderLayout.LINE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ClientFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAcceptInv;
    private javax.swing.JButton jButtonLogOut;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JTextArea jChatArea;
    private javax.swing.JComboBox<String> jComboBoxGames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListInvReceived;
    private javax.swing.JList<String> jListInvSend;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelCenter;
    private javax.swing.JPanel jPanelCenterBottom;
    private javax.swing.JPanel jPanelCenterBottomCenter;
    private javax.swing.JPanel jPanelCenterBottomCenterBottom;
    private javax.swing.JPanel jPanelCenterBottomCenterCenter;
    private javax.swing.JPanel jPanelCenterBottomCenterTop;
    private javax.swing.JPanel jPanelCenterBottomRight;
    private javax.swing.JPanel jPanelCenterCenter;
    private javax.swing.JPanel jPanelCenterTop;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelLeftBottom;
    private javax.swing.JPanel jPanelLeftTop;
    private javax.swing.JPanel jPanelLeftTopCenter;
    private javax.swing.JPanel jPanelLeftTopTop;
    private javax.swing.JPanel jPanelOnline;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelRightCenter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jServerResponse;
    private javax.swing.JTextField jTextFieldSend;
    // End of variables declaration//GEN-END:variables
    
    private final String ThisClientsName;
    private Socket socket;
    private final ArrayList<JCheckBox> clientsOnline = new ArrayList<>();
    private Player currentPlayer;
    
    private Object myMove;
    private String currentGameName;
    private TempGame cGame;
    
    private final String VierGewinntName = VierGewinntSpiel.GameName;
    private final String ChompName = ChompGame.GameName;
    
    public ClientFrame(Socket client, ClientPanelListener listener, String clientName) throws IOException {
        initComponents();
        socket = client;
        ThisClientsName = clientName;
        setup(client, listener);
    }

    public void logOutFromClient() {
        try {
            writeIntoSocket(socket, LogOutRequest);
        } catch (IOException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setup(Socket client, ClientPanelListener listener) throws IOException {

        jButtonSend.addActionListener((ActionEvent e) -> {
            try {
                sendMessage(client, jTextFieldSend.getText());
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        jButtonLogOut.addActionListener(((e) -> {
            try {
                writeIntoSocket(client, LogOutRequest);
                listener.logout();
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }));
        
        jComboBoxGames.addItem(VierGewinntName);
        jComboBoxGames.addItem(ChompName);
        jButtonPlay.addActionListener((e) ->{
            try {
                writeIntoSocket(socket, RequestGame, (String) jComboBoxGames.getSelectedItem());
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        ServerInputLeaf myPersonalLeaf = new ServerInputLeaf(client, new LoggedClientRequestListener() {
            @Override
            public void clientLog(String name, boolean in) {
                updateLoggedClients(jPanelOnline, name, in, client);
                jPanelRight.validate();
                jPanelRight.doLayout();
            }

            @Override
            public void otherAnswer(String answer, ArrayList<String> message) {
                jChatArea.append(answer + "\n");
                for(String d : message){
                    jChatArea.append(d + "\n");
                }
            }

            @Override
            public void serverResponse(String answer) {
                jServerResponse.setText(answer);
            }

            @Override
            public void startGame(String gameName, String nameOfPlayer1, String nameOfPlayer2) {
                System.out.println("start" + gameName + " with "  + nameOfPlayer1+  " and " +  nameOfPlayer2);
                currentGameName = gameName;
                
                switch(currentGameName){
                    case Core.VierGewinntSpiel.GameName:
                        startVierGewinnt(nameOfPlayer1, nameOfPlayer2);
                        break;
                    case ChompName:
                        startChomp(nameOfPlayer1, nameOfPlayer2);
                        break;
                }
            }

            @Override
            public void makeMove(String enemyMove) {
                myPain.setEnabled(true);
                myDialog.setTitle("Your Turn");
                Object move = cGame.StringzuZug(enemyMove);
                System.out.println("move after " + move);
                if (!"-1".equals(enemyMove) && !enemyMove.contains("--")) {
                    System.err.println("IT DOES WORK");
                    cGame.enemyMadeMove();
                }
                currentPlayer.makeMove(move);
            }

            @Override
            public void getMove() {
                System.out.println("give Move");
                try {
                    writeIntoSocket(socket, cGame.ZugzuString(myMove));
                    System.out.println("should have given move" + cGame.ZugzuString(myMove));
                } catch (IOException ex) {
                    Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void gameEnded(String finishingMove, String gameReslutName) {
                myDialog.setTitle(gameReslutName);
                System.out.println("gamesDoneghodvsjiae");
                Object move = cGame.StringzuZug(finishingMove);
               currentPlayer.makeMove(move);
                currentPlayer.gameEnded(move, Game2D2P.GameResult.Draw);
            }

            @Override
            public void moveSet(String Move) {
                Object move = cGame.StringzuZug(Move);
               
                System.err.println("Well I don't particularily want to know gameWatcher things, so I just tag along letting you know you probably coded shit again..");
            }

            @Override
            public void clientsLog(ArrayList<String> loggedClients) {
                for(String loggedClient : loggedClients){
                    updateLoggedClients(jPanelOnline, loggedClient, true, client);
                }
            }

            String[] listDataReceived = new String[0];
            
            @Override
            public void invite(String gameName, ArrayList<String> otherPlayers) {
                String[] newListData = new String[listDataReceived.length+1];
                System.arraycopy(listDataReceived, 0, newListData, 0, listDataReceived.length);
                newListData[newListData.length-1] = inv(gameName, otherPlayers);
                jListInvReceived.setListData(newListData);
                listDataReceived = newListData;
            }

            @Override
            public void uninvite(String gameName, ArrayList<String> otherPlayers) {
                String that = inv(gameName, otherPlayers);
                ArrayList<String> xd = new ArrayList<>();
                for (String f : listDataReceived) {
                    xd.add(f);
                }
                xd.remove(that);
                String[] omegalul = new String[xd.size()];
                for (int i = 0; i < xd.size(); i++) {
                    omegalul[i] = xd.get(i);
                }
                listDataReceived = omegalul;

                jListInvReceived.setListData(listDataReceived);
            }

            private String inv(String gameName, ArrayList<String> otherPlayers){
                String result = "";
                int mount = 0;
                for (String player : otherPlayers) {
                    if (!player.equals(ThisClientsName)) {
                        result += player + " ";
                        mount++;
                    }
                }
                if (mount <= 1) {
                    return result + " wants to play " + gameName + " with you!";
                } else {
                    return result + " want to play " + gameName + " with you!";
                }
            }
        });
        writeIntoSocket(socket, RequestLoggedClients);
        
        String postfix;
        String namo = ThisClientsName.toLowerCase();
        if (namo.endsWith("s") || namo.endsWith("z")) {
            postfix = "'";
        } else {
            postfix = "'s";
        }
        setTitle(ThisClientsName + postfix + " Swing Client");

        (new Thread(myPersonalLeaf)).start();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private JFrame myDialog;
    private Container myPain;
    
    private void startVierGewinnt(String name1, String name2){
        VierGewinntPane myPane = new VierGewinntPane(500, VierGewinntSpiel.SpielFeldHöhe, VierGewinntSpiel.SpielFeldBreite);
        VierGewinntDialog myDia = new VierGewinntDialog(myPane);
        VierGewinntManager theDude = new VierGewinntManager(myPane);
        myDialog = myDia;
        myDia.setVisible(true);
        myPain = myPane;
        myPain.setEnabled(false);
        
        currentPlayer = theDude;
        cGame = new VerGewinntSimulation(VierGewinntName, name1, name2, () -> {
            try {
                myPain.setEnabled(false);
                myDialog.setTitle("Opponents Turn");
                myMove = currentPlayer.getMove();
                System.out.println("Yes the move has been updated now " + myMove);
                writeIntoSocket(socket, MoveMade);
            } catch (MoveNotAvailableException | IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        currentPlayer.gameStarted(cGame);
    }

    private void startChomp(String name1, String name2) {
        ChompSwingPane myPane = new ChompSwingPane(500, ChompGame.SpielFeldHöhe, ChompGame.SpielFeldBreite);
        ChompDialog myDia = new ChompDialog(myPane);
        ChompManager theDude = new ChompManager(myPane);
        myDialog = myDia;
        myDia.setVisible(true);
        myPain = myPane;
        myPain.setEnabled(false);

        currentPlayer = theDude;
        cGame = new ChompSimulatedGame(ChompName, name1, name2, () -> {
            try {
                myPain.setEnabled(false);
                myDialog.setTitle("Opponents Turn");
                myMove = currentPlayer.getMove();
                System.out.println("Yes the move has been updated now " + myMove);
                writeIntoSocket(socket, MoveMade);
            } catch (MoveNotAvailableException | IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        currentPlayer.gameStarted(cGame);
    }

    private void updateLoggedClients(Container c, String name, boolean add, Socket socket) {
        if (add) {
            JCheckBox newCLient = createOnlineFriend(socket, name);
            clientsOnline.add(newCLient);
            c.add(newCLient);
        } else {
            int i = 0;
            for (; i < clientsOnline.size(); i++) {
                if (clientsOnline.get(i).getText().equals(name)) {
                    break;
                }
            }
            c.remove(clientsOnline.get(i));
            clientsOnline.remove(i);
        }
    }

    private void sendMessage(Socket client, String message) throws IOException {
        writeIntoSocket(client, SendMessageRequest, message);
        System.out.println("message");
    }

    private JCheckBox createOnlineFriend(Socket client, String name) {
        JCheckBox result = new JCheckBox();
        result.setText(name);
        result.setSelected(false);
        result.addActionListener((e) -> {
            try {
                updateTarget(client, result.getText());
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        return result;
    }

    private void updateTarget(Socket client, String name) throws IOException {
        writeIntoSocket(client, name);
        System.out.println("update");
    }
}
//Once Generics are carried out strictly, this approach will not stand a chance because of strict tyoe casting
//it will be required to make a shadow game that actually works and reference other players throuch the socket tunnel.
